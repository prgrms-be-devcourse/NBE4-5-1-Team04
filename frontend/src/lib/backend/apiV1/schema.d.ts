/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 주문 불러오기
         * @description orderId를 통해 특정 주문 불러오기
         */
        get: operations["getOrderByOrderId"];
        /** 주문 수정 */
        put: operations["updateOrder"];
        post?: never;
        /** 주문 삭제 */
        delete: operations["cancelOrder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 상품 수정 */
        put: operations["updateItem"];
        post?: never;
        /** 상품 삭제 */
        delete: operations["deleteItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 정보 조회 */
        get: operations["getCustomerById"];
        /** 내 정보 수정 */
        put: operations["updateCustomer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 회원의 전체 주문 불러오기
         * @description 회원 인증값을 통해 특정 회원에 대한 주문 전체 불러오기
         */
        get: operations["getOrdersByPrincipal"];
        put?: never;
        /** 주문 생성 */
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/{orderId}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["confirmOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 상품 조회
         * @description 페이징 처리와 검색 및 정렬 기능
         */
        get: operations["sortedItems"];
        put?: never;
        /** 상품 생성 */
        post: operations["createItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/items/{id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 상품 이미지 조회 */
        get: operations["getItemImage"];
        put?: never;
        /**
         * 상품 이미지 등록
         * @description 상품의 ID를 이용해 해당 상품의 이미지 등록 (JPEG 형식)
         */
        post: operations["addImageToItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 전체 회원 정보 조회 */
        get: operations["getAllCustomers"];
        put?: never;
        /** 회원 가입 */
        post: operations["join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customer/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그인
         * @description 로그인 성공 시 ApiKey와 DTO 반환
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 개별 상품 조회 */
        get: operations["item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        OrderItemDto: {
            /** Format: int64 */
            itemId?: number;
            /** Format: int32 */
            quantity?: number;
        };
        OrderWithOrderItemsDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            date?: string;
            /** Format: int64 */
            totalPrice?: number;
            deliveryStatus?: string;
            orderedItems?: components["schemas"]["OrderItemDto"][];
        };
        ResponseDtoOrderWithOrderItemsDto: {
            code?: string;
            message?: string;
            data?: components["schemas"]["OrderWithOrderItemsDto"];
        };
        ItemDto: {
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int32 */
            price?: number;
            /** Format: int32 */
            stock?: number;
            imageUri?: string;
        };
        ResponseDtoItemDto: {
            code?: string;
            message?: string;
            data?: components["schemas"]["ItemDto"];
        };
        CustomerDto: {
            /** Format: int64 */
            id?: number;
            username: string;
            password: string;
            name: string;
            email: string;
        };
        ResponseDtoCustomerDto: {
            code?: string;
            message?: string;
            data?: components["schemas"]["CustomerDto"];
        };
        ResponseDtoLong: {
            code?: string;
            message?: string;
            /** Format: int64 */
            data?: number;
        };
        ResponseDtoString: {
            code?: string;
            message?: string;
            data?: string;
        };
        JoinReqBody: {
            username: string;
            password: string;
            name: string;
            email: string;
        };
        LoginReqBody: {
            username: string;
            password: string;
        };
        LoginResBody: {
            item?: components["schemas"]["CustomerDto"];
            apiKey?: string;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        OrderDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            date?: string;
            /** Format: int64 */
            totalPrice?: number;
            deliveryStatus?: string;
        };
        PageOrderDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["OrderDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        PageableObject: {
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            unpaged?: boolean;
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
        };
        ResponseDtoPageOrderDto: {
            code?: string;
            message?: string;
            data?: components["schemas"]["PageOrderDto"];
        };
        SortObject: {
            sorted?: boolean;
            unsorted?: boolean;
            empty?: boolean;
        };
        PageItemDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ItemDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        ResponseDtoPageItemDto: {
            code?: string;
            message?: string;
            data?: components["schemas"]["PageItemDto"];
        };
        ResponseDtoListCustomerDto: {
            code?: string;
            message?: string;
            data?: components["schemas"]["CustomerDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getOrderByOrderId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoOrderWithOrderItemsDto"];
                };
            };
        };
    };
    updateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderItemDto"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoOrderWithOrderItemsDto"];
                };
            };
        };
    };
    cancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoLong"];
                };
            };
        };
    };
    updateItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoItemDto"];
                };
            };
        };
    };
    deleteItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoString"];
                };
            };
        };
    };
    getCustomerById: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoCustomerDto"];
                };
            };
        };
    };
    updateCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoCustomerDto"];
                };
            };
        };
    };
    getOrdersByPrincipal: {
        parameters: {
            query: {
                arg1: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoPageOrderDto"];
                };
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderItemDto"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoOrderWithOrderItemsDto"];
                };
            };
        };
    };
    confirmOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoLong"];
                };
            };
        };
    };
    sortedItems: {
        parameters: {
            query: {
                sortBy?: string;
                searchKeyword?: string;
                arg2: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoPageItemDto"];
                };
            };
        };
    };
    createItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoItemDto"];
                };
            };
        };
    };
    getItemImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    addImageToItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoString"];
                };
            };
        };
    };
    getAllCustomers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoListCustomerDto"];
                };
            };
        };
    };
    join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JoinReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoCustomerDto"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["LoginResBody"];
                };
            };
        };
    };
    item: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResponseDtoItemDto"];
                };
            };
        };
    };
}
